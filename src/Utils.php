<?php

declare(strict_types=1);

/**
 * This file is part of PHPUnit Coverage Check.
 *
 * (c) Eric Sizemore <admin@secondversion.com>
 * (c) Richard Regeer <rich2309@gmail.com>
 *
 * This source file is subject to the MIT license. For the full copyright,
 * license information, and credits/acknowledgements, please view the LICENSE
 * and README files that were distributed with this source code.
 */

namespace Esi\CoverageCheck;

use SimpleXMLElement;

use function file_exists;
use function sprintf;

final class Utils
{
    /**
     * Returns the given number formatted and rounded for percentage.
     */
    public static function formatCoverage(float $number): string
    {
        return sprintf('%0.2F%%', $number);
    }

    /**
     * Attempts to determine if we are actually using a PHPUnit generated clover file.
     *
     * As of 2024/03/28, the Clover XML report generated by PHPUnit (using phpunit-code-coverage) does
     * not validate against the official  Atlassian clover XSD.
     *
     * @see https://bitbucket.org/atlassian/clover/raw/master/etc/schema/clover.xsd
     * @see https://github.com/sebastianbergmann/php-code-coverage/issues/578
     *
     * So this is a workaround of sorts, though a little 'hacky'.
     */
    public static function isPossiblyClover(SimpleXMLElement $xml): bool
    {
        if ($xml->getName() !== 'coverage') {
            return false;
        }

        $hasChildren = $xml->children();

        if ($hasChildren->project === null || $hasChildren->project->metrics === null) {
            return false;
        }

        if (!isset($hasChildren->project->metrics['elements'], $hasChildren->project->metrics['coveredelements'])) {
            return false;
        }

        unset($hasChildren);

        return true;
    }

    /**
     * A simple file_exists check on the Clover file.
     */
    public static function validateCloverFile(string $cloverFile): bool
    {
        return ($cloverFile !== '' && file_exists($cloverFile));
    }

    /**
     * A simple check to determine if threshold is within accepted range (Min. 1, Max. 100).
     */
    public static function validateThreshold(int $threshold): bool
    {
        return ($threshold > 0 && $threshold <= 100);
    }
}
