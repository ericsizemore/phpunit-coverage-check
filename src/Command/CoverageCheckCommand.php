<?php

declare(strict_types=1);

/**
 * This file is part of PHPUnit Coverage Check.
 *
 * (c) Eric Sizemore <admin@secondversion.com>
 * (c) Richard Regeer <rich2309@gmail.com>
 *
 * This source file is subject to the MIT license. For the full copyright,
 * license information, and credits/acknowledgements, please view the LICENSE
 * and README files that were distributed with this source code.
 */

namespace Esi\CoverageCheck\Command;

use Esi\CoverageCheck\Application;
use Esi\CoverageCheck\CoverageCheck;
use Esi\CoverageCheck\Style\CoverageCheckStyle;
use Esi\CoverageCheck\Utils;
use Override;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\TableCell;
use Symfony\Component\Console\Helper\TableCellStyle;
use Symfony\Component\Console\Helper\TableSeparator;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Throwable;

/**
 * @see \Esi\CoverageCheck\Tests\Command\CoverageCheckCommandTest
 *
 * @psalm-suppress PropertyNotSetInConstructor
 */
#[AsCommand(name: Application::COMMAND_NAME, description: Application::APPLICATION_DESCRIPTION)]
final class CoverageCheckCommand extends Command
{
    /**
     * Matches CoverageCheck::ERROR_INSUFFICIENT_DATA, except for '[ERROR]' prefix.
     *
     * @see CoverageCheck::ERROR_INSUFFICIENT_DATA
     *
     * @internal
     *
     * @since 3.0.0
     */
    public const string ERROR_INSUFFICIENT_DATA = 'Insufficient data for calculation. Please add more code.';

    /**
     * Matches CoverageCheck::ERROR_COVERAGE_BELOW_THRESHOLD, except for '[ERROR]' prefix and '%' on first value.
     *
     * @see CoverageCheck::ERROR_COVERAGE_BELOW_THRESHOLD
     *
     * @internal
     *
     * @since 3.0.0
     */
    public const string ERROR_COVERAGE_BELOW_THRESHOLD = 'Total code coverage is %s which is below the accepted %d%%';

    /**
     * Matches CoverageCheck::OK_TOTAL_CODE_COVERAGE, except for '[OK]' prefix and '%' on value.
     *
     * @see CoverageCheck::OK_TOTAL_CODE_COVERAGE
     *
     * @internal
     *
     * @since 3.0.0
     */
    public const string OK_TOTAL_CODE_COVERAGE = 'Total code coverage is %s';

    /**
     * @internal
     *
     * @since 3.0.0
     */
    private const string INPUT_ARGUMENT_CLOVERFILE = 'The location of the clover xml file that is generated by PHPUnit.';

    /**
     * @internal
     *
     * @since 3.0.0
     */
    private const string INPUT_ARGUMENT_THRESHOLD = 'The coverage threshold that is acceptable. Min = 1, Max = 100';

    /**
     * @internal
     *
     * @since 3.0.0
     */
    private const string INPUT_OPTION_ONLY_PERCENTAGE = 'Only return the resulting coverage percentage';

    /**
     * @internal
     *
     * @since 3.0.0
     */
    private const string INPUT_OPTION_SHOW_FILES = 'Show a breakdown of coverage by file';

    private CoverageCheckStyle $coverageCheckStyle;

    public function __construct(private readonly CoverageCheck $coverageCheck)
    {
        parent::__construct();
    }

    /**
     * @see Command
     */
    #[Override]
    protected function configure(): void
    {
        $this
            ->setDefinition([
                new InputArgument('cloverfile', InputArgument::REQUIRED, self::INPUT_ARGUMENT_CLOVERFILE),
                new InputArgument('threshold', InputArgument::REQUIRED, self::INPUT_ARGUMENT_THRESHOLD),
                new InputOption('--only-percentage', '-O', InputOption::VALUE_NONE, self::INPUT_OPTION_ONLY_PERCENTAGE),
                new InputOption('--show-files', '-F', InputOption::VALUE_NONE, self::INPUT_OPTION_SHOW_FILES),
            ])
            ->setHelp(
                <<<'EOF'
                    The <info>%command.name%</info> command calculates coverage score for the provided clover xml report.

                    You must also pass a coverage threshold that is acceptable. <info>Min = 1, Max = 100</info>:

                    <info>php %command.full_name% /path/to/clover.xml 100</info>

                    You may also choose to only return the resulting coverage percentage by using the <info>--only-percentage</info> option:

                    <info>php %command.full_name% /path/to/clover.xml 100 --only-percentage</info>

                    You may also choose to show a breakdown of coverage by file by using the <info>--show-files</info> option:

                    <info>php %command.full_name% /path/to/clover.xml 100 --show-files</info>
                    EOF
            )
        ;
    }

    /**
     * @see Command
     * @see CoverageCheck
     * @see CoverageCheckStyle
     *
     * Suppress for Psalm as atm the var annotations are still needed for PHPStan.
     *
     * @psalm-suppress UnnecessaryVarAnnotation
     */
    #[Override]
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->coverageCheckStyle = new CoverageCheckStyle($input, $output);

        /** @phpstan-var string $cloverFile */
        $cloverFile = $input->getArgument('cloverfile');

        /** @phpstan-var string $threshold */
        $threshold = $input->getArgument('threshold');

        /** @phpstan-var bool $onlyPercentage */
        $onlyPercentage = $input->getOption('only-percentage');

        /** @phpstan-var bool $showFiles */
        $showFiles = $input->getOption('show-files');

        $this->coverageCheck->setCloverFile($cloverFile)
            ->setThreshold((int) $threshold)
            ->setOnlyPercentage($onlyPercentage);

        try {
            $result = $showFiles ? $this->coverageCheck->processByFile() : $this->coverageCheck->process();
        } catch (Throwable $throwable) {
            $this->coverageCheckStyle->error($throwable->getMessage());

            return Command::INVALID;
        }

        // No metrics
        if ($result === false) {
            $this->coverageCheckStyle->error(self::ERROR_INSUFFICIENT_DATA);

            return Command::FAILURE;
        }

        // --show-files
        if (\is_array($result)) {
            return $this->getFileTable($result);
        }

        // Standard output
        return $this->getResultOutput($result);
    }

    /**
     * @param array{
     *     fileMetrics: array<string, array{coveredMetrics: int, totalMetrics: int, percentage: float|int}>,
     *     totalCoverage: float|int
     * } $result
     */
    private function getFileTable(array $result): int
    {
        $threshold     = $this->coverageCheck->getThreshold();
        $tableRows     = [];
        $totalElements = ['coveredMetrics' => 0, 'totalMetrics' => 0];
        $metrics       = $result['fileMetrics'];
        $totalCoverage = $result['totalCoverage'];

        unset($result);

        foreach ($metrics as $name => $file) {
            $tableRows[] = [
                $name,
                \sprintf('%d/%d', $file['coveredMetrics'], $file['totalMetrics']),
                new TableCell(
                    Utils::formatCoverage($file['percentage']),
                    [
                        'style' => new TableCellStyle(
                            [
                                'cellFormat' => ($file['percentage'] < $threshold) ? '<error>%s</error>' : '<info>%s</info>',
                            ]
                        ),
                    ]
                ),
            ];

            $totalElements['coveredMetrics'] += $file['coveredMetrics'];
            $totalElements['totalMetrics']   += $file['totalMetrics'];
        }

        unset($metrics);

        $tableRows[] = new TableSeparator();
        $tableRows[] = [
            'Overall Totals',
            \sprintf('%d/%d', $totalElements['coveredMetrics'], $totalElements['totalMetrics']),
            new TableCell(
                Utils::formatCoverage($totalCoverage),
                ['style' => new TableCellStyle(['cellFormat' => ($totalCoverage < $threshold) ? '<error>%s</error>' : '<info>%s</info>', ])]
            ),
        ];

        $this->coverageCheckStyle->table(
            ['File', 'Elements (Covered/Total)', 'Coverage'],
            $tableRows
        );

        unset($tableRows);

        if ($totalCoverage < $threshold) {
            return Command::FAILURE;
        }

        return Command::SUCCESS;
    }

    private function getResultOutput(float $result): int
    {
        $threshold         = $this->coverageCheck->getThreshold();
        $onlyPercentage    = $this->coverageCheck->getOnlyPercentage();
        $formattedCoverage = Utils::formatCoverage($result);
        $belowThreshold    = $result < $threshold;

        // Only display the percentage?
        if ($onlyPercentage) {
            // ... below the accepted threshold
            if ($belowThreshold) {
                $this->coverageCheckStyle->error($formattedCoverage, true);

                return Command::FAILURE;
            }

            // all good, we meet or exceed the threshold
            $this->coverageCheckStyle->success($formattedCoverage, true);

            return Command::SUCCESS;
        }

        // We want the full messageâ€¦
        if ($belowThreshold) {
            // ... below the accepted threshold
            $this->coverageCheckStyle->error(
                \sprintf(self::ERROR_COVERAGE_BELOW_THRESHOLD, $formattedCoverage, $threshold)
            );

            return Command::FAILURE;
        }

        // all good, we meet or exceed the threshold
        $this->coverageCheckStyle->success(\sprintf(self::OK_TOTAL_CODE_COVERAGE, $formattedCoverage));

        return Command::SUCCESS;
    }
}
