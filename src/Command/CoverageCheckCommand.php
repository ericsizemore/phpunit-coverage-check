<?php

declare(strict_types=1);

/**
 * This file is part of PHPUnit Coverage Check.
 *
 * (c) Eric Sizemore <admin@secondversion.com>
 * (c) Richard Regeer <rich2309@gmail.com>
 *
 * This source file is subject to the MIT license. For the full copyright,
 * license information, and credits/acknowledgements, please view the LICENSE
 * and README files that were distributed with this source code.
 */

namespace Esi\CoverageCheck\Command;

use Esi\CoverageCheck\CoverageCheck;
use Exception;
use InvalidArgumentException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

use function sprintf;

class CoverageCheckCommand extends Command
{
    protected static $defaultName = 'coverage:check';

    public function __construct(private readonly CoverageCheck $coverageCheck)
    {
        parent::__construct();
    }

    /**
     * @see Command
     */
    protected function configure(): void
    {
        $this
            ->setName('coverage:check')
            ->setDefinition([
                new InputArgument('cloverfile', InputArgument::REQUIRED, 'The location of the clover xml file that is generated by PHPUnit.'),
                new InputArgument('threshold', InputArgument::REQUIRED, 'The coverage threshold that is acceptable. Min = 1, Max = 100'),
                new InputOption('only-percentage', '', InputOption::VALUE_NONE, 'Only return the resulting coverage percentage'),
            ])
            ->setDescription('Reads the clover xml report from PHPUnit and calculates the coverage score.')
            ->setHelp(
                <<<'EOF'
                    The <info>%command.name%</info> command calculates coverage score for the provided clover xml report.

                    You must also pass a coverage threshold that is acceptable. <info>Min = 1, Max = 100</info>:

                    <info>php %command.full_name% /path/to/clover.xml 100</info>

                    You may also choose to only return the resulting coverage percentage by using the <info>--only-percentage</info> option:

                    <info>php %command.full_name% /path/to/clover.xml 100 --only-percentage=true</info>
                    EOF
            )
        ;
    }

    /**
     * @see Command
     * @see CoverageCheck
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        /** @var string $cloverFile */
        $cloverFile = $input->getArgument('cloverfile');

        /** @var string $threshold */
        $threshold = $input->getArgument('threshold');

        $this->coverageCheck->setCloverFile($cloverFile)
            ->setThreshold((int) $threshold)
            ->setOnlyPercentage($input->getOption('only-percentage'));

        //@codeCoverageIgnoreStart
        try {
            $result = $this->coverageCheck->process();
        } catch (InvalidArgumentException | Exception $exception) {
            $output->writeln($this->getHelper('formatter')->formatBlock(
                $exception->getMessage(),
                'error',
                true
            ));

            return Command::INVALID;
        }
        //@codeCoverageIgnoreEnd

        if ($result === false) {
            $output->writeln($this->getHelper('formatter')->formatBlock(
                'Insufficient data for calculation. Please add more code.',
                'error',
                true
            ));

            return Command::FAILURE;
        }

        if ($result < $this->coverageCheck->getThreshold() && !$this->coverageCheck->getOnlyPercentage()) {
            $output->writeln($this->getHelper('formatter')->formatBlock(sprintf(
                'Total code coverage is %s which is below the accepted %d %%',
                CoverageCheck::formatCoverage($result),
                $this->coverageCheck->getThreshold()
            ), 'error', true));

            return Command::FAILURE;
        }

        if ($result < $this->coverageCheck->getThreshold() && $this->coverageCheck->getOnlyPercentage()) {
            $output->writeln($this->getHelper('formatter')->formatBlock(
                CoverageCheck::formatCoverage($result),
                'error',
                true
            ));

            return Command::FAILURE;
        }

        if ($this->coverageCheck->getOnlyPercentage()) {
            $output->writeln($this->getHelper('formatter')->formatBlock(
                CoverageCheck::formatCoverage($result),
                'info',
                true
            ));

            return Command::SUCCESS;
        }

        $output->writeln($this->getHelper('formatter')->formatBlock(
            sprintf('Total code coverage is %s - OK!', CoverageCheck::formatCoverage($result)),
            'info',
            true
        ));

        return Command::SUCCESS;
    }
}
