<?php

declare(strict_types=1);

/**
 * This file is part of PHPUnit Coverage Check.
 *
 * (c) Eric Sizemore <admin@secondversion.com>
 * (c) Richard Regeer <rich2309@gmail.com>
 *
 * This source file is subject to the MIT license. For the full copyright,
 * license information, and credits/acknowledgements, please view the LICENSE
 * and README files that were distributed with this source code.
 */

namespace Esi\CoverageCheck\Command;

use Esi\CoverageCheck\CoverageCheck;
use Esi\CoverageCheck\Style\CoverageCheckStyle;
use Esi\CoverageCheck\Utils;
use Exception;
use InvalidArgumentException;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

use function sprintf;

#[AsCommand(name: 'coverage:check', description: 'Reads the clover xml report from PHPUnit and calculates the coverage score.')]
class CoverageCheckCommand extends Command
{
    public function __construct(private readonly CoverageCheck $coverageCheck)
    {
        parent::__construct();
    }

    /**
     * @see Command
     */
    #[\Override]
    protected function configure(): void
    {
        $this
            ->setDefinition([
                new InputArgument('cloverfile', InputArgument::REQUIRED, 'The location of the clover xml file that is generated by PHPUnit.'),
                new InputArgument('threshold', InputArgument::REQUIRED, 'The coverage threshold that is acceptable. Min = 1, Max = 100'),
                new InputOption('--only-percentage', '-O', InputOption::VALUE_NONE, 'Only return the resulting coverage percentage'),
            ])
            ->setHelp(
                <<<'EOF'
                    The <info>%command.name%</info> command calculates coverage score for the provided clover xml report.

                    You must also pass a coverage threshold that is acceptable. <info>Min = 1, Max = 100</info>:

                    <info>php %command.full_name% /path/to/clover.xml 100</info>

                    You may also choose to only return the resulting coverage percentage by using the <info>--only-percentage</info> option:

                    <info>php %command.full_name% /path/to/clover.xml 100 --only-percentage=true</info>
                    EOF
            )
        ;
    }

    /**
     * @see Command
     * @see CoverageCheck
     * @see CoverageCheckStyle
     */
    #[\Override]
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new CoverageCheckStyle($input, $output);

        /** @var string $cloverFile */
        $cloverFile = $input->getArgument('cloverfile');

        /** @var string $threshold */
        $threshold = $input->getArgument('threshold');

        $this->coverageCheck->setCloverFile($cloverFile)
            ->setThreshold((int) $threshold)
            ->setOnlyPercentage($input->getOption('only-percentage'));

        //@codeCoverageIgnoreStart
        try {
            $result = $this->coverageCheck->process();
        } catch (InvalidArgumentException | Exception | \RuntimeException $exception) {
            $io->error($exception->getMessage());

            return Command::INVALID;
        }
        //@codeCoverageIgnoreEnd

        // No metrics
        if ($result === false) {
            $io->error('Insufficient data for calculation. Please add more code.');

            return Command::FAILURE;
        }

        $threshold         = $this->coverageCheck->getThreshold();
        $onlyPercentage    = $this->coverageCheck->getOnlyPercentage();
        $formattedCoverage = Utils::formatCoverage($result);

        // ... below the accepted threshold
        if ($result < $threshold) {
            $io->error(
                $onlyPercentage
                ? $formattedCoverage
                : sprintf('Total code coverage is %s which is below the accepted %d%%', $formattedCoverage, $threshold),
                $onlyPercentage
            );

            return Command::FAILURE;
        }

        // Meets or exceeds threshold
        $io->success(
            $onlyPercentage
            ? $formattedCoverage
            : sprintf('Total code coverage is %s', $formattedCoverage),
            $onlyPercentage
        );

        return Command::SUCCESS;
    }
}
